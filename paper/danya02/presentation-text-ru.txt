Меш сети -- это технология радио-связи,
при которой устройства в сети общаются
не с центральным роутером (таким как Wi-Fi роутер
или сотовая вышка).
Вместо этого каждое устройство передает сигнал
его ближайшим соседям напрямую.
Из-за этого они проще в установке,
а также надежнее:
английское слово mesh значит "сетчатая структура",
например рыболовная сетка,
и в ней, как в меш-сети,
сохраняется целостность,
даже если какая-то часть соединений порвется.

Из-за этих свойств меш-сети часто используются в
системах интернета вещей. Однако существуют проблемы с
тем, чтобы отлаживать поведение таких сетей.

Чаще всего при разработке алгоритмов маршрутизации
используют симуляторы общего назначения,
такие как NS3.
Этот симулятор имеет много возможностей,
и его можно использовать для проводных и беспроводных сетей
разных топологий.
Но из-за этого он не имеет связи с каким-либо настоящим оборудованием --
поэтому разработанный алгоритм нужно будет переписать
относительно физических интерфейсов,
из-за чего возможны ошибки.
Если же использовать симулятор, который
связан с какой-то конкретной платформой
(например Contiki Cooja для ОС Contiki),
то это ограничивает выбор микроконтроллера,
который можно использовать для этого устройства.

Поэтому в этой работе мы разработали свой
собственный симулятор,
который запускает ровно тот же самый код,
как и на аппаратной платформе,
чтобы избежать ошибок при портировании.

Этот симулятор написан на языке Rust,
из-за чего он имеет несколько преимуществ
по сравнению с другими:
например, он запускается на любой операционной системе,
в том числе в веб-браузере,
а код может компилироваться для ограниченных платформ.

При разработке нам нужно было сделать
несколько архитектурных решений,
и в этом мы ориентировались на
оборудование, доступное нам.
Например, для передачи данных
мы выбрали одностороннюю связь -- 
физически реализованную как подключение между
Wi-Fi-клиентом и роутером.
Это не очень похоже на то, как работают
простые радио модули,
но это позволяет нам эффективно использовать
модули ESP-01.
Для практических реализаций можно сделать абстракцию
над протоколом широковещательной связи,
которая выглядит как односторонняя связь.

Внутри одного робота запущено два модуля,
которые мы называем скриптами.
Один отвечает за движение и поведение робота,
а параллельно с ним работает другой скрипт,
который отвечает за маршрутизацию и установление связей.

Из-за этого два модуля можно менять независимо от
друг друга:
роботы могут общаться друг с другом
по одному протоколу,
но выполнять разные задачи.

Это полезно для нашего практического
